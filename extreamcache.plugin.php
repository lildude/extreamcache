<?php

/**
 * The output buffer callback used to capture the output and cache it.
 *
 * @see extreamcache::init()
 * @param string $buffer The output buffer contents
 * @return bool false
 */
function ob_handler($output, $flags) {
	$path = $_SERVER['REQUEST_URI'];
	$paths = explode('/', $path);

	$create = HABARI_PATH.'/user/cache';
	for ($i = 0; $i < count($paths)-1; $i++) // -1 to not treat the last part as a folder.
	{
		if($paths[$i] === '') continue; // We had an extra / in the start, oups.

		$create .= '/'.$paths[$i];

		if(is_dir($create)) continue; // No need to create an existing folder.

		mkdir($create);
	}

	$result = file_put_contents(HABARI_PATH.'/user/cache'.$path.'.extream', $output);
	return false;
}


/**
 * @package extreamcache
 */


/**
 * extreamcache Plugin will cache the HTML output generated by Habari for each page.
 */
class ExtreamCache extends Plugin
{
	const VERSION = 0.3;
	const EXPIRE_STATS = 604800;
	const STATS_GROUP_NAME = 'extreamcache_stats';
	const GROUP_NAME = 'extreamcache';
	const FILE_EXTENSION = 'extream';
	const CACHE_PATH = 'user/cache';

	/**
	 * Set a priority of 1 on action_init so we run first
	 *
	 * @return array the priorities for our hooks
	 */
	public function set_priorities()
	{
		return array(
			'action_init' => 1
			);
	}


	/**
	 * Create aliases to additional hooks
	 *
	 * @return array aliased hooks
	 */
	public function alias()
	{
		return array(
			'action_post_update_after' => array(
				'action_post_insert_after',
				'action_post_delete_after'
			),
			'action_comment_update_after' => array(
				'action_comment_insert_after',
				'action_comment_delete_after'
			)
		);
	}


	/**
	 * Serves the cache page or starts the output buffer. Ignore URLs matching
	 * the ignore list, and ignores if there are session messages.
	 *
	 * @see extreamcache_ob_end_flush()
	 */
	public function action_init()
	{
		/**
		 * Allows plugins to add to the ignore list. An array of all URLs to ignore
		 * is passed to the filter.
		 *
		 * @filter extreamcache_ignore an array of URLs to ignore
		 */
		$ignore_array = Plugins::filter(
			'extreamcache_ignore',
			explode(',', Options::get('extreamcache__ignore_list' ))
		);

		// sanitize the ignore list for preg_match
		$ignore_list = implode( 
			'|',
			array_map(
				create_function('$a', 'return preg_quote(trim($a), "@");'),
				$ignore_array
			)
		);

		$request = Site::get_url('host') . $_SERVER['REQUEST_URI'];
		$request_method = $_SERVER['REQUEST_METHOD'];

		/* don't cache PUT or POST requests, pages matching ignore list keywords, 
		 * nor pages with session messages
		 */
		if ( $request_method == 'PUT' || $request_method == 'POST'
			|| preg_match("@.*($ignore_list).*@i", $request) || Session::has_messages() ) {
			return;
		}

		// record miss
		$this->record_stats('miss');
		ob_start('ob_handler');
	}


	/**
	 * Record extreamcaches stats in the cache itself to avoid DB writes.
	 * Data includes hits, misses, and avg.
	 *
	 * @param string $type type of record, either hit or miss
	 * @param double $profile_start start of the profiling
	 */
	protected function record_stats( $type, $profile_start = null )
	{
		switch ( $type ) {
			case 'hit':
				break;
			case 'miss':
				Cache::set( array(self::STATS_GROUP_NAME, 'misses'), Cache::get(array(self::STATS_GROUP_NAME, 'misses')) + 1, self::EXPIRE_STATS );
				break;
		}
	}


	/**
	 * Add the Extream Cache dashboard module
	 *
	 * @param array $modules Available dash modules
	 * @return array modules array
	 */
	public function filter_dash_modules( array $modules )
	{
		$this->add_template('extream_cache_stats', dirname( __FILE__ ) . '/dash_module_extreamcache.php');
		$modules[] = 'Extream Cache';
		return $modules;
	}


	/**
	 * Filters the Extream Cache dash module to add the theme template output.
	 *
	 * @param array $module the struture of the module
	 * @param Theme the current theme from the handler
	 * @return array the modified module structure
	 */
	public function filter_dash_module_extream_cache( array $module, $id, Theme $theme )
	{
		$misses = Cache::get(array(self::STATS_GROUP_NAME, 'misses'));
		$theme->extream_cache_misses = $misses;
		
		$module['content'] = $theme->fetch('extream_cache_stats');
		return $module;
	}


	/**
	 * Ajax entry point for the 'clear cache data' action. Clears all stats and cache data
	 * and outputs a JSON encoded string message.
	 */
	public function action_auth_ajax_clear_extreamcache()
	{
		$files = array();
		$files = array_merge($files, glob("user/cache/*.".self::FILE_EXTENSION));
		$files= array_merge($files, glob("user/cache/*/*.".self::FILE_EXTENSION));
		$files= array_merge($files, glob("user/cache/*/*/*.".self::FILE_EXTENSION));

		foreach ($files as $slug)
		{
			$this->cache_invalidate($slug);
		}
		Cache::set( array(self::STATS_GROUP_NAME, 'misses'), 0 );
		echo json_encode(_t( "Cleared Extream Cache's cache" ) );
	}


	/**
	 * Invalidates (removes) the cache entry for the give file.
	 *
	 * @param string $slug Filename of the file to remove
	 */
	public function cache_invalidate( $urls )
	{
		if ( ! is_array($urls))
		{
			$urls = array($urls);
		}
		$habari = Site::get_url('habari');
		foreach ($urls as $url)
		{
			$slug = str_replace(self::CACHE_PATH, '', $url);
			$slug = str_replace($habari, '', $slug);
			$slug = str_replace(HABARI_PATH, '', $slug);
			$file = HABARI_PATH.'/'.self::CACHE_PATH.$slug;
			unlink($file);
		}
	}


	/**
	 * Clears cache for the given post after it's updated. includes all CRUD operations.
	 *
	 * @param Post the post object to clear cache for
	 * @see extreamcache::cache_invalidate()
	 */
	public function action_post_update_after( Post $post )
	{
		$urls = array(
			$post->comment_feed_link,
			$post->permalink,
			URL::get('atom_feed', 'index=1'),
			Site::get_url('habari')
			);
		$this->cache_invalidate($comment->post->slug.'.'.self::FILE_EXTENSION);
	}


	/**
	 * Clears cache for the given comments parent post after it's updated. includes all
	 * CRUD operations.
	 *
	 * @param Comment the comment object to clear cache for it's parent post
	 * @see extreamcache::cache_invalidate()
	 */
	public function action_comment_update_after( Comment $comment )
	{
		$this->cache_invalidate($comment->post->slug.'.'.self::FILE_EXTENSION);
	}


	/**
	 * Setup the initial ignore list on activation. Ignores URLs matching the following:
	 * /admin, /feedback, /user, /ajax, /auth_ajax, and ?nocache
	 */
	public function action_plugin_activation()
	{
		Options::set('extreamcache__ignore_list', '/admin,/feedback,/user,/ajax,/auth_ajax,?nocache,/cron');
	}


	/**
	 * Adds a 'configure' action to the pllugin page.
	 *
	 * @param array $actions the default plugin actions
	 * @param strinf $plugin_id the plugins id
	 * @return array the actions to add
	 */
	public function filter_plugin_config( array $actions, $plugin_id )
	{
		if ( $plugin_id == $this->plugin_id() ) {
			$actions[]= _t('Configure', 'extreamcache');
		}
		return $actions;
	}


	/**
	 * Adds the configure UI
	 *
	 * @todo add invalidate cache button
	 * @param string $plugin_id the plugins id
	 * @param string $action the action being performed
	 */
	public function action_plugin_ui( $plugin_id, $action )
	{
		if ( $plugin_id == $this->plugin_id() ) {
			switch ( $action ) {
				case _t('Configure', 'extreamcache') :
					$ui = new FormUI('extreamcache');

					$ignore = $ui->append('textarea', 'ignore', 'extreamcache__ignore_list', _t('Do not cache any URI\'s matching these keywords (comma seperated): ', 'extreamcache'));
					$ignore->add_validator('validate_required');

					$ui->append('submit', 'save', _t('Save', 'extreamcache'));
					$ui->on_success( array( $this, 'save_config_msg' ) );
					$ui->out();
					break;
			}
		}
	}

    public static function save_config_msg( $ui )
	{
		$ui->save();
		Session::notice( _t( 'Options saved' ) );
		return false;
	}

}

?>
